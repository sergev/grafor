/*
 *      Файл low.c - машинно-зависимая часть ГРАФОРа,
 *      связанная с графикой.
 *
 *      Функции:
 *
 *      subroutine begin (nx, ny)
 *      integer nx
 *      integer ny
 *
 *              - включение графического режима. Максимальные значения
 *              графических координат, которые предполагается использовать,
 *              заданы в nx и ny. Перо устанавливается в точку 0, 0.
 *
 *      subroutine end
 *
 *              - выключение графического режима.
 *
 *      subroutine plot (nx, ny, k)
 *      integer nx
 *      integer ny
 *      integer k
 *
 *              - перемещение пера в точку nx, ny. Если k==2, перемещение
 *              происходит с опущеным пером (отрисовка линии), иначе - с
 *              поднятым (изменение позиции).
 *
 *      subroutine setpen (n)
 *      integer n
 *
 *              - установка цвета пера с номером n. По умолчанию - 1.
 *
 *      subroutine setmtf (name, len)
 *      character name (len)
 *      integer len
 *
 *              - задание имена метафайла для вывода графика. Длина len имени
 *              name не должна превышать 14 символов.
 *
 *      subroutine setprn
 *
 *              - задание вывода графика на принтер.
 *
 *      subroutine setscr
 *
 *              - задание вывода графика на дисплей.
 *
 *      subroutine commnt (s, len)
 *      character s (len)
 *      integer len
 *
 *              - запись комментария s длиной len в метафайл.
 *
 *      subroutinе paint (nx, ny, n)
 *      integer nx
 *      integer ny
 *      integer n
 *
 *              - заливка обасти от точки nx, ny до границы цветом n.
 */

# include <stdio.h>

/*
 *      В настоящий момент поддерживаются два соглашения
 *      о связях между Си и фортраном:
 *
 *      1.      Для вызова фортран-функции из Си к имени нужно добавить
 *              подчерк. Порядок параметров - тот же. Параметры
 *              передаются по ссылке. Типы integer и real в фортране
 *              соответствует long и float в Си.
 *              Используется по умолчанию.
 *
 *      2.      Для вызова фортран-функции из Си ее нужно описать
 *              ключевым словом fortran. Порядок параметров - тот же.
 *              Параметры передаются по ссылке. Типы integer и real в
 *              фортране соответствует long и float в Си.
 *              Включается флагом -DMSF.
 */

# ifdef MSF
#       define  BEGIN   fortran Begin
#       define  END     fortran End
#       define  SETPEN  fortran Setpen
#       define  PLOT    fortran Plot
#       define  SETSCR  fortran Setscr
#       define  SETPRN  fortran Setprn
#       define  SETMTF  fortran Setmtf
#       define  PAINT   fortran Painta
#       define  COMMNT  fortran Commnt
#       define  GRINIT  Grinit
# else
#       define  BEGIN   begin_
#       define  END     end_
#       define  SETPEN  setpen_
#       define  PLOT    plot_
#       define  SETSCR  setscr_
#       define  SETPRN  setprn_
#       define  SETMTF  setmtf_
#       define  PAINT   painta_
#       define  COMMNT  commnt_
#       define  GRINIT  grinit_
# endif

# ifdef MSF
extern fortran GRINIT ();
# endif

# define INTEGER long

# define METAFILE

# ifdef M_XENIX
#    define DISPLAY
#    define PRINTER
# endif

# define NORMX(x) ((x)<0?0:(x)>pagx?pagx:(x))
# define NORMY(y) ((y)<0?0:(y)>pagy?pagy:(y))

# define LINESZ 40      /* number of points in line */

# define META   1
# define SCREEN 2
# define PRN    3

# ifdef DISPLAY
#    define DFLTSCR     SCREEN
#    define DFLTEND     Send
#    define DFLTSETPEN  Ssetpen
#    define DFLTMOVE    Smove
#    define DFLTCONT    Scont
#    define DFLTPAINT   dummy
# else
#    define DFLTSCR     META
#    define DFLTEND     Mend
#    define DFLTSETPEN  Msetpen
#    define DFLTMOVE    Mmove
#    define DFLTCONT    Mcont
#    define DFLTPAINT   Mpaint
# endif

static curx, cury;              /* point of last "move" */
static xpoint, ypoint;          /* point of last "cont" */
static pagx, pagy, scrx, scry, shiftx, shifty;
# ifdef DISPLAY
static short devhandle, savary [66];
static short line [2*LINESZ];
static next;
# endif
static pen = 1;
static begflag;
static FILE *metafile = stdout;
static Mend (), Send (), Pend ();
static Mmove (), Smove ();
static Mcont (), Scont ();
static Msetpen (), Ssetpen ();
static Mpaint (), dummy ();

static openreg          = DFLTSCR;
static (*end) ()        = DFLTEND;
static (*setpen) ()     = DFLTSETPEN;
static (*move) ()       = DFLTMOVE;
static (*cont) ()       = DFLTCONT;
static (*paint) ()      = DFLTPAINT;

BEGIN (x, y)
INTEGER *x, *y;
{
	pagx = *x;
	pagy = *y;
	switch (openreg) {
	case META:
		move = Mmove;
		cont = Mcont;
		end = Mend;
		setpen = Msetpen;
		paint = Mpaint;
		Mbegin ();
		break;
	case SCREEN:
		move = Smove;
		cont = Scont;
		end = Send;
		setpen = Ssetpen;
		paint = dummy;
		Sbegin ();
		break;
	case PRN:
		move = Smove;
		cont = Scont;
		end = Pend;
		setpen = Ssetpen;
		paint = dummy;
		Pbegin ();
		break;
	default:
		return;
	}
	(*setpen) (pen);
	begflag = 1;
	curx = cury = xpoint = ypoint = 0;
	initmap ();
}

END ()
{
	if (begflag)
		(*end) ();
	begflag = 0;
}

PLOT (x, y, k)
INTEGER *x, *y, *k;
{
	int xx, yy;

	if (! begflag)
		return;
	xx = NORMX (*x);
	yy = NORMY (*y);
	if (*k == 2) {
		if (curx != xpoint || cury != ypoint)
			(*move) (curx, cury);
		(*cont) (xx, yy);
		xpoint = xx;
		ypoint = yy;
	} else {
		curx = xx;
		cury = yy;
	}
}

SETPEN (n)
INTEGER *n;
{
	pen = *n;
	if (begflag)
		(*setpen) (pen);
}

SETMTF (name, len)
char *name;
INTEGER *len;
{
	setmtf (name, (int) *len);
}

SETPRN () { setprn (); }

SETSCR () { setscr (); }

COMMNT (s, len)
char *s;
INTEGER *len;
{
	register n = *len;

	if (openreg == META) {
		putc (';', metafile);
		while (n-- > 0)
			putc (*s++, metafile);
		putc ('\n', metafile);
	}
}

PAINT (n, x, y)
INTEGER *n, *x, *y;
{
	int xx, yy;

	if (begflag) {
		xx = NORMX (*x);
		yy = NORMX (*y);
		(*paint) ((int) *n, xx, yy);
	}
}

setscr () { openreg = SCREEN; }

setprn () { openreg = PRN; }

setmtf (name, len)
char *name;
{
	char buf [15];

	openreg = META;
	if (len > 0) {
		if (len > 14)
			len = 14;
		strncpy (buf, name, len);
		buf [len] = 0;
		if (metafile != stdout)
			fclose (metafile);
		if (! (metafile = fopen (buf, "w")))
			metafile = stdout;
	}
}

static grinit ()
{
	GRINIT ();      /* dummy call - load block data */
}

static Sbegin ()
{
# ifdef DISPLAY
	static short savin [20] =
		{1,1,1,3,1,1,1,0,0,1,1,'D','I','S','P','L','A','Y',' '};

	/* open the workstation and save output in savary array*/
	v_opnwk (savin, &devhandle, savary);
	next = 0;
	curx = cury = 0;
	scrx = savary [51];     /* maximum width of screen */
	scry = savary [52];     /* maximum height of screen */
# endif
}

static Pend ()
{
# ifdef PRINTER
	flushline ();
	v_clswk (devhandle);
# endif
}

static Send ()
{
# ifdef DISPLAY
	flushline ();
	fgetc (stdin);
	v_clswk (devhandle);
# endif
}

static Ssetpen (n)
{
# ifdef DISPLAY
	flushline ();
	vsl_color (devhandle, n);
	line [next++] = curx;
	line [next++] = cury;
# endif
}

# ifdef DISPLAY
static flushline ()
{
	register i;

	if (next > 3) {
		for (i=0; i<next; i+=2)
			map (&line[i], &line[i+1]);
		v_pline (devhandle, next/2, line);
	}
	next = 0;
}
# endif

static Smove (x, y)
{
# ifdef DISPLAY
	flushline ();
	line [next++] = curx = x;
	line [next++] = cury = y;
# else
	curx = x;
	cury = y;
# endif
}

static Scont (x, y)
{
# ifdef DISPLAY
	line [next++] = curx = x;
	line [next++] = cury = y;
	if (next >= 2*LINESZ)
		Smove (x, y);
# else
	curx = x;
	cury = y;
# endif
}

static Pbegin ()
{
# ifdef PRINTER
	static short savin [20] =
		{1,1,1,3,1,1,1,0,0,1,1,'P','R','I','N','T','E','R',' '};


	/* open the workstation and save output in savary array*/
	v_opnwk (savin, &devhandle, savary);
	curx = cury = 0;
	scrx = savary [51];     /* maximum width of screen */
	scry = savary [52];     /* maximum height of screen */
# endif
}

static Mbegin ()
{
# ifdef METAFILE
	fprintf (metafile, "(%d,%d\n", pagx, pagy);
	curx = cury = 0;
	scrx = scry = 32767;
# endif
}

static Mend ()
{
# ifdef METAFILE
	fprintf (metafile, ")\n");
# endif
}

static Msetpen (n)
{
# ifdef METAFILE
	fprintf (metafile, "!%d\n", n);
# endif
}

static Mmove (x, y)
{
# ifdef METAFILE
	fprintf (metafile, "=%d,%d\n", x, y);
# endif
}

static Mcont (x, y)
{
# ifdef METAFILE
	fprintf (metafile, "-%d,%d\n", curx = x, cury = y);
# endif
}

static dummy () {}

static Mpaint (n, x, y)
{
# ifdef METAFILE
	fprintf (metafile, "@%d,%d,%d\n", x, y, n);
# endif
}

initmap ()
{
	register x, y;

	shiftx = scrx / 20;
	shifty = scry / 20;
	x = scrx = (long) scrx * 9 / 10;
	y = scry = (long) scry * 9 / 10;
	if (scrx/pagx > scry/pagy) {
		scrx = (long) pagx * scry/pagy;
		shiftx += (x - scrx) / 2;
	} else {
		scry = (long) pagy * scrx/pagx;
		shifty += (y - scry) / 2;
	}
}

map (x, y)
register *x, *y;
{
	*x = (long) *x * scrx / pagx + shiftx;
	*y = (long) *y * scry / pagy + shifty;
}
