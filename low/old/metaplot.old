# include <stdio.h>

/* # define DEBUG */

# define DISPLAY
# define PRINTER

# define LINESZ 40      /* number of points in line */
# define MAXPAG 100
# define SCREEN 2
# define PRN    3

static openreg = SCREEN;
static curx, cury, pagx, pagy, scrx, scry, shiftx, shifty;
static scale = 100;
# ifdef DISPLAY
static short devhandle, savary [66];
static short line [2*LINESZ];
static next;
# endif
static Mend (), Send (), Pend ();
static Mmove (), Smove ();
static Mcont (), Scont ();
static Msetpen (), Ssetpen ();
static dummy ();
static (*end) () = Send, (*setpen) () = Ssetpen;
static (*move) () = Smove, (*cont) () = Scont, (*paint) () = dummy;
static FILE *tfile;
static char *tname = "/tmp/mpXXXXXX";
static aspect;
static asp [MAXPAG], nasp, npag;
static divx, divy, globx, globy;

extern char *mktemp ();

static dummy () {}

error (s, a, b, c, d)
char *s;
{
	fprintf (stderr, "metaplot: ");
	fprintf (stderr, s, a, b, c, d);
	fprintf (stderr, "\n");
	exit (1);
}

main (argc, argv)
char **argv;
{
	register char *p;
	int inflag = 0;

	mktemp (tname);
	while (*++argv) switch (**argv) {
	case '-':
		if (tfile)
			break;
		p = *argv;
		while (*++p) {
			switch (*p) {
			case 's':
				if (tfile) {
					group ();
					break;
				}
				if (! (tfile = fopen (tname, "w+")))
					error ("can't create temp file");
				unlink (tname);
				nasp = 0;
				break;
			case '0': case '1':
			case '2': case '3':
			case '4': case '5':
			case '6': case '7':
			case '8': case '9':
				scale = atoi (p);
				if (scale < 1 || scale > 100)
					scale = 100;
				while (p[1]>='0' && p[1]<='9')
					++p;
				break;
			case 'p':
				setprn ();
				break;
			default:
				error ("bad flag: %c", *p);
			}
		}
		break;
	default:
		inflag = 1;
		if (!freopen (*argv, "r", stdin))
			error ("can't open %s", *argv);
		if (tfile)
			scan ();
		else
			draw ();
	}
	if (! inflag)
		if (tfile)
			scan ();
		else
			draw ();
	if (tfile)
		group ();
	return (0);
}

scan ()
{
	register c;

	while ((c = getchar ()) != EOF) {
		switch (c) {
		default:
			while ((c = getchar ()) != EOF && c != '\n');
			break;
		case '(':
			if ((c = getchar ()) == '\n') {
				pagx = 32767;
				pagy = 32767;
			} else {
				ungetc (c, stdin);
				scanf ("%d,%d\n", &pagx, &pagy);
			}
			fprintf (tfile, "(%d,%d\n", pagx, pagy);
			asp [nasp++] = (long) 1000 * pagy / pagx;
			break;
		case ')':
		case '!':
		case '=':
		case '-':
		case '@':
			putc (c, tfile);
			while ((c = getchar ()) != EOF && c != '\n')
				putc (c, tfile);
			if (c == '\n')
				putc ('\n', tfile);
			break;
		}
	}
}

group ()
{
	register c;
	int x, y, n;

	if (nasp <= 0)
		return;
	begin ();
# ifdef DEBUG
	(*end) ();
# endif
	globx = scrx;
	globy = scry;
	aspect = (long) 1000 * scry / scrx;
	npag = nasp;
	nasp = 0;
	optimize ();
	rewind (tfile);
	while ((c = getc (tfile)) != EOF) {
		switch (c) {
		case ')':
			++nasp;
		default:
			while ((c = getc (tfile)) != EOF && c != '\n');
			break;
		case '(':
			fscanf (tfile, "%d,%d\n", &pagx, &pagy);
			initgroup ();
			curx = cury = 0;
			map (&curx, &cury);
			break;
		case '!':
			fscanf (tfile, "%d\n", &n);
			(*setpen) (n);
			break;
		case '=':
			fscanf (tfile, "%d,%d\n", &x, &y);
			map (&x, &y);
			(*move) (x, y);
			break;
		case '-':
			fscanf (tfile, "%d,%d\n", &x, &y);
			map (&x, &y);
			(*cont) (x, y);
			break;
		case '@':
			fscanf (tfile, "%d,%d,%d\n", &x, &y, &n);
			map (&x, &y);
			(*paint) (x, y, n);
			break;
		}
	}
	(*end) ();
	fclose (tfile);
	tfile = 0;
}

draw ()
{
	register c;
	int x, y, n;

	while ((c = getchar ()) != EOF) {
		switch (c) {
		default:
			putchar (c);
			while ((c = getchar ()) != EOF) {
				putchar (c);
				if (c == '\n')
					break;
			}
			break;
		case '(':
			begin ();
			if ((c = getchar ()) == '\n') {
				pagx = scrx;
				pagy = scry;
				shiftx = shifty = 0;
			} else {
				ungetc (c, stdin);
				scanf ("%d,%d\n", &pagx, &pagy);
				initmap ();
				map (&curx, &cury);
			}
			break;
		case ')':
			while ((c = getchar ()) != EOF && c != '\n');
			(*end) ();
			break;
		case '!':
			scanf ("%d\n", &n);
			(*setpen) (n);
			break;
		case '=':
			scanf ("%d,%d\n", &x, &y);
			map (&x, &y);
			(*move) (x, y);
			break;
		case '-':
			scanf ("%d,%d\n", &x, &y);
			map (&x, &y);
			(*cont) (x, y);
			break;
		case '@':
			scanf ("%d,%d,%d\n", &x, &y, &n);
			map (&x, &y);
			(*paint) (x, y, n);
			break;
		}
	}
}

begin ()
{
	switch (openreg) {
	case SCREEN:
		move = Smove;
		cont = Scont;
		end = Send;
		setpen = Ssetpen;
		Sbegin ();
		break;
	case PRN:
		move = Smove;
		cont = Scont;
		end = Pend;
		setpen = Ssetpen;
		Pbegin ();
		break;
	}
}

setscr ()
{
	openreg = SCREEN;
}

setprn ()
{
	openreg = PRN;
}

static Sbegin ()
{
# ifdef DISPLAY
	static short savin [20] =
		{1,1,1,3,1,1,1,0,0,1,1,'D','I','S','P','L','A','Y',' '};

	/* open the workstation and save output in savary array*/
	v_opnwk (savin, &devhandle, savary);
	next = 0;
	curx = cury = 0;
	scrx = savary [51];     /* maximum width of screen */
	scry = savary [52];     /* maximum height of screen */
# endif
}

static Pend ()
{
# ifdef PRINTER
	flushline ();
	v_clswk (devhandle);
# endif
}

static Send ()
{
# ifdef DISPLAY
	register tty;
	char c;

	flushline ();
	if ((tty = open ("/dev/tty", 0)) >= 0) {
		read (tty, &c, 1);
		close (tty);
	}
	v_clswk (devhandle);
# endif
}

static Ssetpen (n)
{
# ifdef DISPLAY
	flushline ();
	vsl_color (devhandle, n);
	line [next++] = curx;
	line [next++] = cury;
# endif
}

# ifdef DISPLAY
static flushline ()
{
	if (next > 3)
		v_pline (devhandle, next/2, line);
	next = 0;
}
# endif

static Smove (x, y)
{
# ifdef DISPLAY
	flushline ();
	line [next++] = curx = x;
	line [next++] = cury = y;
# endif
}

static Scont (x, y)
{
# ifdef DISPLAY
	line [next++] = curx = x;
	line [next++] = cury = y;
	if (next >= 2*LINESZ)
		Smove (x, y);
# endif
}

static Pbegin ()
{
# ifdef PRINTER
	static short savin [20] =
		{1,1,1,3,1,1,1,0,0,1,1,'P','R','I','N','T','E','R',' '};


	/* open the workstation and save output in savary array*/
	v_opnwk (savin, &devhandle, savary);
	next = 0;
	curx = cury = 0;
	scrx = savary [51];     /* maximum width of screen */
	scry = savary [52];     /* maximum height of screen */
# endif
}

area (nx, ny)
{
	register i, casp;
	register cell, ret;

	cell = (long) globx*globy / 2097152L / nx / ny; /* area of one cell */
	casp = (long) aspect * nx/ny;                   /* aspect of one cell */
	ret = 0;
	for (i=0; i<npag; ++i) {
		if (asp[i] > casp)
			ret += (long) cell * casp / asp[i];
		else
			ret += (long) cell * asp[i] / casp;
	}
	return (ret);
}

optimize ()
{
	register i;
	register opt, newopt;

# ifdef DEBUG
	fprintf (stderr, "npag = %d\n", npag);
# endif
	divx = npag;
	divy = 1;
	opt = area (divx, divy);
	for (i=2; i<=npag; ++i) {
		newopt = area (1 + (npag-1) / i, i);
		if (newopt > opt) {
			opt = newopt;
			divx = 1 + (npag-1) / i;
			divy = i;
		}
# ifdef DEBUG
		fprintf (stderr, "nx = %d\tny = %d\tarea = %d\n",
			1 + (npag-1) / i, i, newopt);
# endif
	}
# ifdef DEBUG
	fprintf (stderr, "divx = %d\n", divx);
	fprintf (stderr, "divy = %d\n", divy);
# endif
}

initgroup ()
{
	register x, y;

	if (npag > 1) {
		scrx = (long) globx * 9/10 / divx;
		scry = (long) globy * 9/10 / divy;
		shiftx = globx / 20;
		shifty = globy / 20;
	} else {
		scrx = globx;
		scry = globy;
		shiftx = 0;
		shifty = 0;
	}
	shiftx += (long) nasp % divx * globx * 9/10 / divx;
	if (nasp/divx == divy-1)
		shiftx += (long) (nasp%divx + 1) * globx * 9/10 / divx *
			(divx*divy - npag) / ((npag-1) % divx + 2);
	shifty += (long) (divy - 1 - nasp/divx) * globy * 9/10 / divy;
	shiftx += scrx / 20;
	shifty += scry / 20;
	x = scrx = (long) scrx * 9/10;
	y = scry = (long) scry * 9/10;
	if (scrx/pagx > scry/pagy)
		scrx = (long) pagx * scry/pagy;
	else
		scry = (long) pagy * scrx/pagx;
	scrx = (long) scrx * scale/100;
	scry = (long) scry * scale/100;
	shiftx += (x - scrx) / 2;
	shifty += (y - scry) / 2;
}

initmap ()
{
	register x, y;

	shiftx = scrx / 20;
	shifty = scry / 20;
	x = scrx = (long) scrx * 9 / 10;
	y = scry = (long) scry * 9 / 10;
	if (scrx/pagx > scry/pagy)
		scrx = (long) pagx * scry/pagy;
	else
		scry = (long) pagy * scrx/pagx;
	scrx = (long) scrx * scale/100;
	scry = (long) scry * scale/100;
	shiftx += (x - scrx) / 2;
	shifty += (y - scry) / 2;
}

map (x, y)
register *x, *y;
{
	*x = (long) *x * scrx / pagx + shiftx;
	*y = (long) *y * scry / pagy + shifty;
}
